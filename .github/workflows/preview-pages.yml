name: Deploy Static Preview Pages and Comment (using deploy-pages)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'blog.json'
      - '*.html'
  workflow_dispatch:

permissions:
  pages: write      # to deploy to GitHub Pages
  contents: read   # to checkout the code
  pull-requests: write # to comment on PRs
  id-token: write
  
jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Node.js for HTMLHint
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # Use a Long Term Support version of Node.js

      - name: Install HTMLHint
        run: npm install -g htmlhint

      - name: Lint HTML (index.html)
        run: htmlhint index.html

      - name: Set up GitHub Pages
        uses: actions/configure-pages@v4

      - name: Create version.json
        run: echo "{\"commit\":\"${{ github.sha }}\", \"branch\":\"${{ github.head_ref }}\"}" > version.json

      - name: Get PR number for unique preview path
        id: pr_number
        run: echo "PR_NUM=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Create temporary directory for deployment
        run: mkdir temp_deploy

      - name: Get latest successful main site workflow run ID
        id: get_run_id
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'static.yml',
              branch: 'main',
              status: 'success',
              per_page: 1
            });
            if (workflowRuns.data.total_count === 0) {
              core.setFailed('No successful workflow runs found for static.yml on main branch.');
              return;
            }
            const run_id = workflowRuns.data.workflow_runs[0].id;
            core.setOutput('run_id', run_id);
            console.log(`Found run_id: ${run_id}`);
            return run_id;

      - name: Download latest main site artifact
        uses: actions/download-artifact@v4
        id: download_main_artifact
        with:
          name: github-pages
          path: temp_deploy # Download directly into the temp directory
          repository: ${{ github.repository }}
          run-id: ${{steps.get_run_id.outputs.run_id}}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract main site artifact
        run: find ${{ steps.download_main_artifact.outputs.download-path }} -maxdepth 1 -name '*.tar' -exec tar -xf {} -C temp_deploy \; -exec rm {} \;

      - name: Verify index.html exists at root
        run: |
          if [ ! -f temp_deploy/index.html ]; then
            echo "ERROR: temp_deploy/index.html not found after unzip!"
            echo "This likely means the downloaded archive has an unexpected internal directory structure."
            echo "Listing contents of temp_deploy for debugging:"
            ls -R temp_deploy
            exit 1
          fi
          echo "temp_deploy/index.html found. Proceeding."

      - name: Create preview subdirectory
        run: mkdir -p temp_deploy/previews/${{ steps.pr_number.outputs.PR_NUM }}

      - name: Copy PR content to preview subdirectory
        run: rsync -av --progress . ./temp_deploy/previews/${{ steps.pr_number.outputs.PR_NUM }}/ --exclude temp_deploy --exclude .git --exclude .github

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './temp_deploy'
          name: github-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: Read CNAME domain
        id: cname_reader # Not strictly needed for GITHUB_ENV but good practice
        run: echo "CNAME_DOMAIN=$(cat CNAME)" >> $GITHUB_ENV

      - name: Add comment to PR
        uses: actions/github-script@v7
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request.number;
            const preview_url = `https://${{ env.CNAME_DOMAIN }}/previews/${{ steps.pr_number.outputs.PR_NUM }}/`;
            const message = `ðŸŽ‰ Preview deployed! You can view it here: ${preview_url} (Includes version.json for validation)`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: message
            });
